{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green112\blue192;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sl240\slmult1\tqr\tldot\tx10800\highlight0\b\f0\fs32\lang9 Entry Point is from Process.spawn or IO.popen\par
\par

\pard\sl240\slmult1\qj\fs28 Entry Point in Ruby\line\b0\fs21\line static rb_pid_t\line w32_spawn(int mode, const char *cmd, const char *prog, UINT cp)\par
ret = child_result(CreateChild(wcmd, wshell, NULL, NULL, NULL, NULL, 0), mode);\line\par
static rb_pid_t\par
w32_aspawn_flags(int mode, const char *prog, char *const *argv, DWORD flags, UINT cp)\par
\'85\line ret = child_result(CreateChild(wcmd, wprog, NULL, NULL, NULL, NULL, flags), mode);\line\line\par
Ruby CreateChild(\'85.)\line\line static rb_pid_t\line CreateChild(const WCHAR *cmd, const WCHAR *prog, SECURITY_ATTRIBUTES *psa,\line\tab     HANDLE hInput, HANDLE hOutput, HANDLE hError, DWORD dwCreationFlags)\line\{\line     BOOL fRet;\line     STARTUPINFOW aStartupInfo;\line     PROCESS_INFORMATION aProcessInformation;\line     SECURITY_ATTRIBUTES sa;\line     struct ChildRecord *child;\line\line     if (!cmd && !prog) \{\line\tab errno = EFAULT;\line\tab return NULL;\line     \}\line\line     child = FindFreeChildSlot();\line     if (!child) \{\line\tab errno = EAGAIN;\line\tab return NULL;\line     \}\line\line     if (!psa) \{\line\tab sa.nLength              = sizeof (SECURITY_ATTRIBUTES);\line\tab sa.lpSecurityDescriptor = NULL;\line\tab sa.bInheritHandle       = TRUE;\line\tab psa = &sa;\line     \}\line\line     memset(&aStartupInfo, 0, sizeof(aStartupInfo));\line     memset(&aProcessInformation, 0, sizeof(aProcessInformation));\line     aStartupInfo.cb = sizeof(aStartupInfo);\line     aStartupInfo.dwFlags = STARTF_USESTDHANDLES;\line     if (\cf1 hInput\cf0 ) \{\line\tab aStartupInfo.hStdInput  = hInput;\line     \}\line     else \{\line\tab aStartupInfo.hStdInput  = \cf2 GetStdHandle(STD_INPUT_HANDLE);\line\cf0     \}\line     if (\cf1 hOutput\cf0 ) \{\line\tab aStartupInfo.hStdOutput = hOutput;\line     \}\line     else \{\line\tab aStartupInfo.hStdOutput = \cf2 GetStdHandle(STD_OUTPUT_HANDLE);\cf0\line     \}\line     if (\cf1 hError\cf0 ) \{\line\tab aStartupInfo.hStdError = hError;\line     \}\line     else \{\line\tab aStartupInfo.hStdError = \cf2 GetStdHandle(STD_ERROR_HANDLE);\line     \}\line\cf0\line     dwCreationFlags |= NORMAL_PRIORITY_CLASS;\line\line     if (lstrlenW(cmd) > 32767) \{\line\tab child->pid = 0;\tab\tab /* release the slot */\line\tab errno = E2BIG;\line\tab return NULL;\line     \}\line\line     RUBY_CRITICAL(\{\line\tab fRet = CreateProcessW(prog, (WCHAR *)cmd, psa, psa,\line\tab\tab\tab        ->bInheritHandle, dwCreationFlags, NULL, NULL,\line\tab\tab\tab       &aStartupInfo, &aProcessInformation);\line\tab errno = map_errno(GetLastError());\line     \});\line\line     if (!fRet) \{\line\tab child->pid = 0;\tab\tab /* release the slot */\line\tab return NULL;\line     \}\line\line     CloseHandle(aProcessInformation.hThread);\line\line     child->hProcess = aProcessInformation.hProcess;\line     child->pid = (rb_pid_t)aProcessInformation.dwProcessId;\line\line     return child;\line\}\line\par
 \par
\par
Ruby createChild(..) disassembly may be partial\line 00000000649BA1BA    66:0F1F4400 00    \tab nop word ptr ds:[rax+rax],ax                 \line 00000000649BA1C0    55               \tab push rbp   \line 00000000649BA1C1    41:57             \tab push r15   \line 00000000649BA1C3    41:56             \tab push r14   \line 00000000649BA1C5    41:55             \tab push r13\tab  \tab `r13:L"C:\\\\Ruby30-x64\\\\bin\\\\rubyw.exe"\line 00000000649BA1C7    41:54            \tab push r12  \tab r12:L"rubyw C:/Users/User/Desktop/popen_client.rb \\"Other Args\\""\line 00000000649BA1C9    57                \tab push rdi   \line 00000000649BA1CA    56                \tab push rsi   \line 00000000649BA1CB    53                \tab push rbx   \line 00000000649BA1CC    48:81EC 08010000  \tab sub rsp,108                                  \line 00000000649BA1D3    48:8DAC24 80000000   \tab lea rbp,qword ptr ss:[rsp+80]                \line 00000000649BA1DB    48:85D2           \tab test rdx,rdx       \tab rdx:L"C:\\\\Ruby30-x64\\\\bin\\\\rubyw.exe"\line 00000000649BA1DE    49:89CC            \tab mov r12,rcx      \tab r12:L"rubyw C:/Users/User/Desktop/popen_client.rb \\"Other Args\\""\line 00000000649BA1E1    49:89D5           \tab  mov r13,rd    \tab r13:L"C:\\\\Ruby30-x64\\\\bin\\\\rubyw.exe", rdx:L"C:\\\\Ruby30-x64\\\\bin\\\\rubyw.exe"\line 00000000649BA1E4    45:89C6            \tab mov r14d,r8d                                 \line 00000000649BA1E7    0F84 B8010000      \tab je x64-msvcrt-ruby220.649BA3A5               \line 00000000649BA1ED    48:8D1D 0C130D00  \tab lea rbx,qword ptr ds:[64A8B500]              \line 00000000649BA1F4    48:8D05 05230D00  \tab lea rax,qword ptr ds:[64A8C500]              \line 00000000649BA1FB    EB 10              \tab jmp x64-msvcrt-ruby220.649BA20D              \line 00000000649BA1FD    0F1F00             \tab nop dword ptr ds:[rax],eax                   \line 00000000649BA200    48:83C3 10        \tab add rbx,10 \line 00000000649BA204    48:39C3           \tab cmp rbx,rax                                  \line 00000000649BA207    0F83 64010000     \tab jae x64-msvcrt-ruby220.649BA371              \line 00000000649BA20D    48:837B 08 00      \tab cmp qword ptr ds:[rbx+8],0                   \line 00000000649BA212    75 EC             \tab jne x64-msvcrt-ruby220.649BA200              \line 00000000649BA214    48:8D75 10         \tab lea rsi,qword ptr ss:[rbp+10]                \line 00000000649BA218    31C0              \tab xor eax,eax                                  \line 00000000649BA21A    B9 0D000000       \tab mov ecx,D  \tab  D:'\\r'\line 00000000649BA21F    48:C743 08 FFFFFFFF   \tab mov qword ptr ds:[rbx+8],FFFFFFFFFFFFFFFF    \line 00000000649BA227    48:C703 00000000   \tab mov qword ptr ds:[rbx],0                     \line 00000000649BA22E    41:83CE 20         \tab or r14d,20 \line 00000000649BA232    48:89F7            \tab mov rdi,rsi                                  \line 00000000649BA235    C745 F0 18000000   \tab mov dword ptr ss:[rbp-10],18                 \line 00000000649BA23C    48:C745 F8 00000000\tab mov qword ptr ss:[rbp-8],0                   \line 00000000649BA244    F348:AB            \tab rep stosq  \line 00000000649BA247    C745 00 01000000   \tab mov dword ptr ss:[rbp],1                     \line 00000000649BA24E    48:8B3D 1F3B0E00   \tab mov rdi,qword ptr ds:[<&GetStdHandle>]       \line 00000000649BA255    B9 F6FFFFFF        \tab mov ecx,FFFFFFF6     #STDIN                        \line 00000000649BA25A    48:C745 D0 00000000   \tab mov qword ptr ss:[rbp-30],0                  \line 00000000649BA262    48:C745 D8 00000000   \tab mov qword ptr ss:[rbp-28],0                  \line 00000000649BA26A    4C:8D7D D0        \tab lea r15,qword ptr ss:[rbp-30]                \line 00000000649BA26E    48:C745 E0 00000000\tab mov qword ptr ss:[rbp-20],0                  \line 00000000649BA276    C745 10 68000000   \tab mov dword ptr ss:[rbp+10],68        68:'h'\line 00000000649BA27D    C745 4C 00010000   \tab mov dword ptr ss:[rbp+4C],100                \line 00000000649BA284    FFD7               \tab call rdi   \line 00000000649BA286    B9 F5FFFFFF        \tab mov ecx,FFFFFFF5      # STDOUT                       \line 00000000649BA28B    48:8945 60        \tab mov qword ptr ss:[rbp+60],rax                \line 00000000649BA28F    FFD7               \tab call rdi   \line 00000000649BA291    B9 F4FFFFFF       \tab mov ecx,FFFFFFF4           #STDERR                 \line 00000000649BA296    48:8945 68         \tab mov qword ptr ss:[rbp+68],rax                \line 00000000649BA29A    FFD7              \tab call rdi   \line 00000000649BA29C    4C:89E1            \tab mov rcx,r12            \tab  r12:L"rubyw C:/Users/User/Desktop/popen_client.rb \\"Other Args\\""\line 00000000649BA29F    48:8945 70         \tab mov qword ptr ss:[rbp+70],rax                \line 00000000649BA2A3    FF15 EB3C0E00      \tab call qword ptr ds:[<&lstrlenW>]              \line 00000000649BA2A9    3D FF7F0000        \tab cmp eax,7FFF                                 \line\line <kernelbase.GetStdHandle>           \line 00007FF9E6FABC90  40:53              \tab push rbx   \line 00007FF9E6FABC92    48:83EC 20         \tab sub rsp,20 \line 00007FF9E6FABC96    83F9 F5            \tab cmp ecx,FFFFFFF5                             \line 00007FF9E6FABC99    75 3E              \tab jne kernelbase.7FF9E6FABCD9                 \line 00007FF9E6FABC9B    6548:8B0425 60000000  \tab mov rax,qword ptr gs:[60]                    \line 00007FF9E6FABCA4    48:8B48 20         \tab mov rcx,qword ptr ds:[rax+20]                \line 00007FF9E6FABCA8    F781 A4000000 0004000  \tab test dword ptr ds:[rcx+A4],400               \line 00007FF9E6FABCB2    75 77             \tab jne kernelbase.7FF9E6FABD2B                  \line 00007FF9E6FABCB4    6548:8B0425 60000000   \tab mov rax,qword ptr gs:[60]                    \line 00007FF9E6FABCBD    48:8B48 20         \tab mov rcx,qword ptr ds:[rax+20]                \line 00007FF9E6FABCC1    48:8B59 28         \tab mov rbx,qword ptr ds:[rcx+28]                \line 00007FF9E6FABCC5    48:83FB FF        \tab cmp rbx,FFFFFFFFFFFFFFFF                     \line 00007FF9E6FABCC9    0F84 37680400     \tab  \tab je kernelbase.7FF9E6FF2506                   \line 00007FF9E6FABCCF    48:8BC3            \tab mov rax,rbx                                  \line 00007FF9E6FABCD2    48:83C4 20         \tab add rsp,20 \line 00007FF9E6FABCD6    5B                 \tab pop rbx    \line 00007FF9E6FABCD7    C3                 \tab ret        \line 00007FF9E6FABCD8    CC                 \tab int3       \line 00007FF9E6FABCD9    83F9 F4            \tab cmp ecx,FFFFFFF4                             \line 00007FF9E6FABCDC    75 13             \tab jne kernelbase.7FF9E6FABCF1                  \line 00007FF9E6FABCDE    6548:8B0425 60000000   \tab mov rax,qword ptr gs:[60]\line\line qword ptr gs:[0000002D4577E060]=0000002D4577D000\line Address=0000002D4577D000 Size=000000000000B000 Page Information=PEB  Allocation Type=PRV Current Protection=-RW-- Allocation Protection=-RW--\line {{\field{\*\fldinst{HYPERLINK https://en.wikipedia.org/wiki/Process_Environment_Block }}{\fldrslt{https://en.wikipedia.org/wiki/Process_Environment_Block\ul0\cf0}}}}\f0\fs21\line\line\line 00007FF9E6FABCE7    48:8B48 20         \tab mov rcx,qword ptr ds:[rax+20]  \line               \line 00007FF9E6FABCEB    48:8B59 30         \tab mov rbx,qword ptr ds:[rcx+30]                \line 00007FF9E6FABCEF    EB D4              \tab jmp kernelbase.7FF9E6FABCC5                  \line 00007FF9E6FABCF1    83F9 F6            \tab cmp ecx,FFFFFFF6                             \line 00007FF9E6FABCF4    75 2C              \tab jne kernelbase.7FF9E6FABD22                  \line 00007FF9E6FABCF6    6548:8B0425 60000000   \tab mov rax,qword ptr gs:[60]                    \line 00007FF9E6FABCFF    48:8B48 20        \tab mov rcx,qword ptr ds:[rax+20]                \line 00007FF9E6FABD03    F781 A4000000 0002000 \tab test dword ptr ds:[rcx+A4],200               \line 00007FF9E6FABD0D    75 1C              \tab jne kernelbase.7FF9E6FABD2B                  \line 00007FF9E6FABD0F    6548:8B0425 60000000   \tab mov rax,qword ptr gs:[60]                    \line 00007FF9E6FABD18    48:8B48 20         \tab mov rcx,qword ptr ds:[rax+20]                \line 00007FF9E6FABD1C    48:8B59 20         \tab mov rbx,qword ptr ds:[rcx+20]                \line 00007FF9E6FABD20    EB A3             \tab jmp kernelbase.7FF9E6FABCC5                  \line 00007FF9E6FABD22    48:83CB FF         \tab or rbx,FFFFFFFFFFFFFFFF                      \line 00007FF9E6FABD26    E9 DB670400       \tab jmp kernelbase.7FF9E6FF2506                  \line 00007FF9E6FABD2B    33DB               \tab xor ebx,ebx                                  \line 00007FF9E6FABD2D    EB A0              \tab jmp kernelbase.7FF9E6FABCCF                  \line\line\line\line\line\f1\line  \par
\line\b\f0\fs32 Ruby get process parent pid\b0\fs21\line\f1 rb_pid_t\line rb_w32_getppid(void)\line\{\line     typedef long (WINAPI query_func)(HANDLE, int, void *, ULONG, ULONG *);\line     static query_func *pNtQueryInformationProcess = NULL;\line     rb_pid_t ppid = 0;\line\line     if (rb_w32_osver() >= 5) \{\line\tab if (!pNtQueryInformationProcess)\line\tab     pNtQueryInformationProcess = (query_func *)get_proc_address("ntdll.dll", "NtQueryInformationProcess", NULL);\line\tab if (pNtQueryInformationProcess) \{\line\tab     struct \{\line\tab\tab long ExitStatus;\line\tab\tab void* PebBaseAddress;\line\tab\tab uintptr_t AffinityMask;\line\tab\tab uintptr_t BasePriority;\line\tab\tab uintptr_t UniqueProcessId;\line\tab\tab uintptr_t ParentProcessId;\line\tab     \} pbi;\line\tab     ULONG len;\line\tab     long ret = pNtQueryInformationProcess(GetCurrentProcess(), 0, &pbi, sizeof(pbi), &len);\line\tab     if (!ret) \{\line\tab\tab ppid = pbi.ParentProcessId;\line\tab     \}\line\tab\}\line     \}\line\line     return ppid;\line\}\line\line\par
\fs16  \par
\par

\pard\keep\keepn\sb340\sa330\sl578\slmult0\qj\b\f0\fs32 Edit the Sketchup.exe Process Environment Header\par

\pard\sl240\slmult1\qj\b0\fs21 import sys\par
import struct\par
\par
if len(sys.argv) < 4:\par
    print "Change Exe Run Mode Application by burlachenkok@gmail.com\\nNot sufficient parametrs. 'exe_src_name.exe' 'exe_dest_name.exe' 'to_console' or 'to_windows'"\par
    sys.exit(-1)\par
\par
source = open(sys.argv[1], "rb")\par
dest   = open(sys.argv[2], "w+b")\par
dest.write(source.read())\par
\par
dest.seek(0x3c)\par
(PeHeaderOffset,)=struct.unpack("H", dest.read(2))\par
\par
dest.seek(PeHeaderOffset)\par
(PeSignature,)=struct.unpack("I", dest.read(4))\par
if PeSignature != 0x4550:\par
    print "Error in Find PE header"\par
\par
dest.seek(PeHeaderOffset + 0x5C)\par
\par
if sys.argv[3].strip() == "to_console":\par
    # console mode\par
    dest.write(struct.pack("H", 0x03))\par
elif sys.argv[3].strip() == "to_windows":\par
    # window mode\par
    dest.write(struct.pack("H", 0x02))\par
else:\par
    print "Wrong Format: '" + sys.argv[3] + "'"\par
\par
source.close()\par
dest.close()\par
\par
print "Completed succesfully.."\par
\par
}
 